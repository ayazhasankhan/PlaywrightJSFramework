import { test } from '@playwright/test';
import { LoginPage } from '../../login/pages/LoginPage';
import { ManagerDocExpressPage } from '../pages/ManagerDocExpressPage';
import { Common } from '../../utils/Common';
import { ManagerDashbordPage } from '../pages/ManagerDashbordPage';
import { EditorDashboardPage } from '../../editorTab/pages/EditorDashboardPage';
import { TranslatorsPage  } from '../../translatorTab/pages/translatorsPage';
import { ReviewerDashboardPage } from '../../reviewerTab/pages/ReviewerDashboardPage';


let loginPage;
let common;
let managerDocExpressPage;
let managerDashbordPage;
let editorDashboardPage;
let translatorsPage;
let reviewerDashboardPage;


test.describe('Locked Segment Feature (@smoke)', () => {
  test.beforeEach(async ({ page, isMobile }) => {
    loginPage = new LoginPage(page, isMobile);
    common = new Common(page, isMobile);
    managerDocExpressPage = new ManagerDocExpressPage(page, isMobile);
    managerDashbordPage = new ManagerDashbordPage(page, isMobile);
    editorDashboardPage = new EditorDashboardPage(page, isMobile);
    translatorsPage = new TranslatorsPage(page, isMobile);
    reviewerDashboardPage = new ReviewerDashboardPage(page, isMobile);
  });

  test('Validate if Manager can enable Segment Locking option on during project creation and lock option is available for editor, reviewer and translator', async () => {
    await loginPage.navigate();
    await loginPage.clickOnLoginLink();
    await loginPage.enterEmailAddress('ayaz.hasan+manager@helpshift.com');
    await loginPage.enterPassword('Alliswell@3832');
    await loginPage.clickOnLoginButton();
    await managerDocExpressPage.clickOnManagerDocExpressTab();
    await managerDocExpressPage.clickOnProjectTemplateDrpdwn();
    await managerDocExpressPage.enterProjectTemplateName('MrA2ZTestProjectConfigTemplate');
    await managerDocExpressPage.clickOnProjectTemplateNameList('MrA2ZTestProjectConfigTemplate');
    await managerDocExpressPage.clickOnNext();
    //  await managerDocExpressPage.chooseSourceLanguage();
    //  await managerDocExpressPage.chooseTargetLanguage();
    //  await managerDocExpressPage.clickOnExtractLanguages();
    await common.uploadFile('./resources/10Segments.txt', '#statusMessage');
    await managerDocExpressPage.waitForFileToBeUploaded();
    await managerDocExpressPage.clickOnNext();
    await managerDocExpressPage.clickOnWorkflowAccordionDrpdwn();
    // await managerDocExpressPage.clickOnChannelDrpdwn();
    //  await managerDocExpressPage.enterChannelName('MrA2ZTestChannel');
    // await managerDocExpressPage.clickOnChannel('MrA2ZTestChannel');
    // await managerDocExpressPage.clickOnAutomaticLaunch();
    await managerDocExpressPage.clickOnLockedSegments();
    await managerDocExpressPage.clickOnNext();
    await managerDocExpressPage.clickOnUserManagementAccordionDrpdwn();
    await managerDocExpressPage.clickOnNext();
    await managerDocExpressPage.clickOnNext();
    await managerDocExpressPage.clickOnLaunchProject();
    await common.wait(30000);
    await managerDashbordPage.clickOnManagerDashboardTab();
    const id = await managerDocExpressPage.getProjectID();
    await managerDocExpressPage.print(managerDocExpressPage);
    await loginPage.clickOnLogOut();
    await loginPage.clickOnLoginLink();
    await loginPage.enterEmailAddress('ayaz.hasan+editor1@helpshift.com');
    await loginPage.enterPassword('Alliswell@3832');
    await loginPage.clickOnLoginButton();
    await editorDashboardPage.clickOnDashboard();
    await common.search(id);
    await common.validateText(id);
    await editorDashboardPage.clickOnViewAvailableFilesForPostEditing();
    await editorDashboardPage.clickOnPostEditFile();
    await editorDashboardPage.clickOnLockUnlockSegmentBtn();
    await editorDashboardPage.clickOnConfirmYes();
    await common.validateText('Success!');
    await editorDashboardPage.clickOnDashboard();
    await editorDashboardPage.clickOnViewAvailableFilesForPostEditing();
    await editorDashboardPage.clickOnReleaseLockedFile();
    await common.validateText('Success!');
    // Login with reviwer and validate lock icon
    await loginPage.clickOnLogOut();
    await loginPage.clickOnLoginLink();
    await loginPage.enterEmailAddress('ayaz.hasan+reviewe@helpshift.com');
    await loginPage.enterPassword('Alliswell@3832');
    await loginPage.clickOnLoginButton();
    await reviewerDashboardPage.clickOnDashboard();
    await reviewerDashboardPage.moveSlideBartotheRight();
    await reviewerDashboardPage.clickOnViewAvailableFilesForPostEditing();
    await reviewerDashboardPage.clickOnPostEditFile();
    await reviewerDashboardPage.clickOnLockUnlockSegmentBtn();
    await reviewerDashboardPage.clickOnConfirmYes();
    await common.validateText('Success!');
    await reviewerDashboardPage.clickOnDashboard();
    await reviewerDashboardPage.clickOnViewAvailableFilesForPostEditing();
    await reviewerDashboardPage.clickOnReleaseLockedFile();
    await common.validateText('Success!');
    // Login with translator and validate lock icon
    await loginPage.clickOnLogOut();
    await loginPage.clickOnLoginLink();
    await loginPage.enterEmailAddress('ayaz.hasan+translator@helpshift.com');
    await loginPage.enterPassword('Alliswell@3832');
    await loginPage.clickOnLoginButton();
    await translatorsPage.clickOnEditorDashboard();
    await common.search('');
    await translatorsPage.clickOnViewAvailableFilesForPostEditing();
    await translatorsPage.clickOnPostEditFile();
    await translatorsPage.clickOnLockUnlockSegmentBtn();
    await translatorsPage.clickOnConfirmYes();
    await common.validateText('Success!');
    await editorDashboardPage.clickOnDashboard();
    await translatorsPage.clickOnViewAvailableFilesForPostEditing();
    await translatorsPage.clickOnReleaseLockedFile();
    await common.validateText('Success!');
    await editorDashboardPage.clickOnDashboard();
    await reviewerDashboardPage.clickOnDashboard();
    await reviewerDashboardPage.moveSlideBartotheRight();
    await translatorsPage.clickOnViewAvailableFilesForReview();
    await translatorsPage.clickOnReviewFile();
    await translatorsPage.clickOnLockUnlockSegmentBtn();
    await translatorsPage.clickOnConfirmYes();
    await common.validateText('Success!');
    await reviewerDashboardPage.clickOnDashboard();
    await translatorsPage.clickOnViewAvailableFilesForReview();
    await translatorsPage.clickOnReleaseLockedFile();
    await common.validateText('Success!');
  });

  test('Validate if Manager can disable Segment Locking option on during project creation and same has on edwina', async () => {
    await loginPage.navigate();
    await loginPage.clickOnLoginLink();
    await loginPage.enterEmailAddress('ayaz.hasan+manager@helpshift.com');
    await loginPage.enterPassword('Alliswell@3832');
    await loginPage.clickOnLoginButton();
    await managerDocExpressPage.clickOnManagerDocExpressTab();
    await managerDocExpressPage.clickOnProjectTemplateDrpdwn();
    await managerDocExpressPage.enterProjectTemplateName('MrA2ZTestProjectConfigTemplate');
    await managerDocExpressPage.clickOnProjectTemplateNameList('MrA2ZTestProjectConfigTemplate');
    await managerDocExpressPage.clickOnNext();
    await common.uploadFile('./resources/10Segments.txt', '#statusMessage');
    await managerDocExpressPage.waitForFileToBeUploaded();
    await managerDocExpressPage.clickOnNext();
    await managerDocExpressPage.clickOnWorkflowAccordionDrpdwn();
    await managerDocExpressPage.clickOnChannelDrpdwn();
    await managerDocExpressPage.enterChannelName('MrA2ZTestChannel');
    await managerDocExpressPage.clickOnChannel('MrA2ZTestChannel');
    // await managerDocExpressPage.clickOnAutomaticLaunch();
    // await managerDocExpressPage.clickOnLockedSegments();
    await managerDocExpressPage.clickOnNext();
    await managerDocExpressPage.clickOnUserManagementAccordionDrpdwn();
    await managerDocExpressPage.clickOnNext();
    await managerDocExpressPage.clickOnNext();
    await managerDocExpressPage.clickOnLaunchProject();
    await common.wait(30000);
    await managerDashbordPage.clickOnManagerDashboardTab();
    const id = await managerDocExpressPage.getProjectID();
    await managerDocExpressPage.print(managerDocExpressPage);
    await loginPage.clickOnLogOut();
    await loginPage.clickOnLoginLink();
    await loginPage.enterEmailAddress('ayaz.hasan+editor1@helpshift.com');
    await loginPage.enterPassword('Alliswell@3832');
    await loginPage.clickOnLoginButton();
    await editorDashboardPage.clickOnDashboard();
    await common.search(id);
    await common.validateText(id);
    await editorDashboardPage.clickOnViewAvailableFilesForPostEditing();
    await editorDashboardPage.clickOnPostEditFile();
    await editorDashboardPage.validateTaskAvailable();
  });

  test('Validate if Manager can enable Segment Locking option during project edit', async () => {
    await loginPage.navigate();
    await loginPage.clickOnLoginLink();
    await loginPage.enterEmailAddress('ayaz.hasan+manager@helpshift.com');
    await loginPage.enterPassword('Alliswell@3832');
    await loginPage.clickOnLoginButton();
    await managerDocExpressPage.clickOnManagerDocExpressTab();
    await managerDocExpressPage.clickOnProjectTemplateDrpdwn();
    await managerDocExpressPage.enterProjectTemplateName('MrA2ZTestProjectConfigTemplate');
    await managerDocExpressPage.clickOnProjectTemplateNameList('MrA2ZTestProjectConfigTemplate');
    await managerDocExpressPage.clickOnNext();
    await common.uploadFile('./resources/10Segments.txt', '#statusMessage');
    await managerDocExpressPage.waitForFileToBeUploaded();
    await managerDocExpressPage.clickOnNext();
    await managerDocExpressPage.clickOnWorkflowAccordionDrpdwn();
    await managerDocExpressPage.clickOnChannelDrpdwn();
    await managerDocExpressPage.enterChannelName('MrA2ZTestChannel');
    await managerDocExpressPage.clickOnChannel('MrA2ZTestChannel');
    // await managerDocExpressPage.clickOnAutomaticLaunch();
    // await managerDocExpressPage.clickOnLockedSegments();
    await managerDocExpressPage.clickOnNext();
    await managerDocExpressPage.clickOnUserManagementAccordionDrpdwn();
    await managerDocExpressPage.clickOnNext();
    await managerDocExpressPage.clickOnNext();
    await managerDocExpressPage.clickOnLaunchProject();
    await common.wait(30000);
    await managerDashbordPage.clickOnManagerDashboardTab();
    const id = await managerDocExpressPage.getProjectID();
    await managerDocExpressPage.print(managerDocExpressPage);
    await common.search(id);
    await managerDashbordPage.clickOnEditProjectProperties();
    await managerDashbordPage.clickOnEditingOfLockedSegmentsNo();
    await managerDashbordPage.clickOnUpdate();
    await loginPage.clickOnLogOut();
    await loginPage.clickOnLoginLink();
    await loginPage.enterEmailAddress('ayaz.hasan+editor1@helpshift.com');
    await loginPage.enterPassword('Alliswell@3832');
    await loginPage.clickOnLoginButton();
    await editorDashboardPage.clickOnDashboard();
    await common.search(id);
    await editorDashboardPage.clickOnViewAvailableFilesForPostEditing();
    await editorDashboardPage.clickOnPostEditFile();
    await editorDashboardPage.clickOnLockUnlockSegmentBtn();
    await editorDashboardPage.clickOnConfirmYes();
    await common.validateText('Success!');
  });

  test('validate Edwina search functionality', async () => {
    await loginPage.navigate();
    await loginPage.clickOnLoginLink();
    await loginPage.enterEmailAddress('ayhasan@keywordsstudios.com');
    await loginPage.enterPassword('Alliswell@3833');
    await loginPage.clickOnLoginButton();
    await editorDashboardPage.clickOnDashboard();
    await common.search('82338');
    await common.validateText('82338');
    await editorDashboardPage.clickOnViewAvailableFilesForPostEditing();
    await editorDashboardPage.clickOnPostEditFile();
    await editorDashboardPage.clickOnStart();
    await editorDashboardPage.clickOnSkip();
    await editorDashboardPage.clickOnSkip();
    await editorDashboardPage.searchEdwinaText();
    await editorDashboardPage.getAndValidateText();
  });
});   
